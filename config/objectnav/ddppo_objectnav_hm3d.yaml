# @package _global_

defaults:
  - /habitat_baselines/rl/policy/depth: depth_base
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat/simulator/agents/main_agent/sim_sensors/new_depth_sensor: new_depth_sensor
  - /benchmark/nav/objectnav: objectnav_hm3d
  - /habitat_baselines/rl/policy/obs_transforms:
    - center_cropper_base
    - resize_shortest_edge_base
  - _self_

habitat:
  environment:
    iterator_options:
      max_scene_repeat_steps: 50000
  task:
    success_reward: 6.4
    slack_reward: -1e-3
    measurements:
      success:
        success_distance: 0.3
  simulator:
    agents:
      main_agent:
        sim_sensors:
          new_depth_sensor:
            width: 224
            height: 224

habitat_baselines:
  torch_gpu_id: 0
  tensorboard_dir: "data/tensorboard_dirs/objectnav_hm3d_new"
  eval_ckpt_path_dir: "data/checkpoints/objectnav_hm3d_new"
  checkpoint_folder: "data/checkpoints/objectnav_hm3d_new"
  test_episode_count: -1
  num_environments: 20
  trainer_name: "myddppo"
  num_updates: -1
  total_num_steps: 1e7
  log_interval: 10
  num_checkpoints: 20
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True

  eval:
    split: "val"

  rl:
    policy:
      name: "PointNavTACPolicy"
      depth:
        trainable: False
        pretrained: True
        pretrained_weights: data/checkpoints/TAC/best.pth

    agent:
      type: MyAccessMgr
    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 4
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 64
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: True
      use_linear_lr_decay: True
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: /root/baseline/data/checkpoints/objectnav_hm3d/ckpt.19.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether or not the visual encoder backbone will be trained.
      train_encoder: True
      # Whether or not to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet18
      rnn_type: LSTM
      num_recurrent_layers: 2
